// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  TEACHER
}

model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  password   String
  role       Role      @default(TEACHER)
  fullName   String?
  phone      String?

  teacher    HomeRoomTeacher? @relation(fields: [teacherId], references: [id])
  teacherId  Int?

  refreshTokens RefreshToken[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  revoked   Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model PostImages {
  id    Int       @id @default(autoincrement())
  path  String

  posts  Posts[] 
}

model Posts {
  id        Int     @id @default(autoincrement())
  title     String
  description String

  gradeId Int
  grade   Grade     @relation(fields: [gradeId], references: [id])

  imageId   Int
  image     PostImages @relation(fields: [imageId], references: [id])
}

model Student {
  id         Int      @id @default(autoincrement())
  fullName   String
  birthDate  DateTime
  email      String?
  gender     Boolean    
  phone      String
  imagePath  String?

  // Relations
  classId Int?
  class   Class?     @relation(fields: [classId], references: [id])

  gradeId Int?
  grade   Grade?     @relation(fields: [gradeId], references: [id])
    
  files   File[]
}

model HomeRoomTeacher {
  id        Int       @id @default(autoincrement())
  fullName  String
  email     String    @unique
  phone     String
  grades    Grade[]
  user      User[]     // optional link if teacher has a user account
}

model Class {
  id       Int       @id @default(autoincrement())
  name     String

  students Student[]
}

model Grade {
  id       Int       @id @default(autoincrement())
  name     String

  students Student[]
  teacherId   Int?
  teacher  HomeRoomTeacher? @relation(fields: [teacherId], references: [id]) 
  posts Posts[]
 
}

model File {
  id       Int      @id @default(autoincrement())
  name     String
  path     String

  studentId Int?
  student   Student? @relation(fields: [studentId], references: [id])
}




